{"version":3,"mappings":";;;QAGY,OAAI;AACJ,oBAAY,KAAI;MAEvB;AAEJ,UAAO;AACN,6CAAqB,8BAAO;AAExB,cAAM;AAAS,cAAQ,MAAM;SAE5B,MAAI;AAEJ,qBAAW,4BAA4B;sBAC3C,OAAI;AAAA,QACH,SAAS;AAAA,QACT,WAAa,wBAAsB,MAAM,QAAO;AAAA;;UAI5C,OAAI,IAAO,MAAM,IAAI;AACrB,eAAK;AACX,gCAAY,IAAI;AAGV,6BAAmB,gBAAgB,OAAO,aAAa;AAE7D;AAAA,MACC;AAAA,aACO,UAAK;AACL,wBAAU;;;QAIf,SAAS;AAAA;;;AAIL,mDAAmB;YACnB,UAAU,IAAI;AAAA,aACZ;AACR,cAAQ,KAAK,2BAA2B;AAAA;;AAK1C,YAAS;;AAED,sBAAU;aACR;AACR,cAAQ,IAAI,oCAAoC;AAAA","names":[],"sources":["../../../../../../node_modules/@douganderson444/hypns-svelte-component/src/lib/Component.svelte"],"sourcesContent":["<script>\n\timport { onMount, onDestroy } from 'svelte';\n\n\texport let opts = {}; // default to empty, overwritten if opts are passed in as svelte props\n\texport let hypnsNode = null;\n\n\tlet HyPNS;\n\n\tonMount(async () => {\n\t\tHyPNS = await import('hypns'); // uses the browser field in package.json\n\n\t\tif (HyPNS.default) HyPNS = HyPNS.default; // so we can dev with vite dev\n\n\t\tif (!opts) {\n\t\t\t// add some friendly defaults\n\t\t\tlet wsProxy = ['wss://hyperswarm.mauve.moe']; // put your websocket proxy server here if you're not running a local hyperswarm-web on :4977\n\t\t\topts = {\n\t\t\t\tpersist: true,\n\t\t\t\tswarmOpts: { announceLocalAddress: true, wsProxy }\n\t\t\t};\n\t\t}\n\n\t\tconst node = new HyPNS(opts);\n\t\tawait node.init();\n\t\thypnsNode = node;\n\t\t// Close the HyPNS connection if the browser is closed\n\t\t// https://developers.google.com/web/updates/2018/07/page-lifecycle-api#the-unload-event\n\t\tconst terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';\n\n\t\taddEventListener(\n\t\t\tterminationEvent,\n\t\t\tasync (event) => {\n\t\t\t\tawait hypnsNode.close();\n\t\t\t\t// Note: if the browser is able to cache the page, `event.persisted`\n\t\t\t\t// is `true`, and the state is frozen rather than terminated.\n\t\t\t},\n\t\t\t{ capture: true }\n\t\t);\n\n\t\ttry {\n\t\t\tconst mod = await import('webrtc-adapter');\n\t\t\tconst adapter = mod.default;\n\t\t} catch (error) {\n\t\t\tconsole.warn('WebRTC adapter not found.');\n\t\t}\n\t});\n\n\t// this function will be called automatically when mounted svelte component is destroyed\n\tonDestroy(async () => {\n\t\ttry {\n\t\t\tawait hypnsNode.close();\n\t\t} catch (error) {\n\t\t\tconsole.log('Closed undefined Hypns component. ');\n\t\t}\n\t});\n</script>\n"],"file":"_app/immutable/chunks/index-5149353b.js"}